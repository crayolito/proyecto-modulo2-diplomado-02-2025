name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'
  WORKING_DIR: './environments/dev'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Job 1: Validaciones de código
  validate:
    name: '🔍 Validate & Security Scan'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # - name: Install validation tools
    #   run: |
    #     # Install Checkov
    #     pip install checkov
        
    #     # Install TFLint
    #     curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
        
    #     # Verify installations
    #     checkov --version
    #     tflint --version

    - name: Terraform Format Check
      run: |
        terraform fmt -check -recursive
        if [ $? -ne 0 ]; then
          echo "❌ Code is not properly formatted"
          echo "Run: terraform fmt -recursive"
          exit 1
        fi
        echo "✅ Code formatting is correct"

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.WORKING_DIR }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Validate
      run: |
        terraform validate
        if [ $? -ne 0 ]; then
          echo "❌ Terraform configuration is invalid"
          exit 1
        fi
        echo "✅ Terraform configuration is valid"
      working-directory: ${{ env.WORKING_DIR }}

    # - name: TFLint Analysis
    #   run: |
    #     # Cambiar a la raíz del proyecto
    #     cd ${{ github.workspace }}
    #     # Inicializar plugins (se crearán en .tflint.d en la raíz)
    #     tflint --init
    #     # Ejecutar análisis recursivo con la configuración de la raíz
    #     tflint --recursive
    #     if [ $? -ne 0 ]; then
    #       echo "❌ TFLint found issues"
    #       exit 1
    #     fi
    #     echo "✅ TFLint analysis passed"

    # - name: Checkov Security Scan
    #   run: |
    #     checkov -d . --config-file .checkov.yml --output cli --exit-code-from checks
    #     if [ $? -ne 0 ]; then
    #       echo "❌ Security issues found by Checkov"
    #       exit 1
    #     fi
    #     echo "✅ Security scan passed"

    # - name: Secrets Scan
    #   run: |
    #     checkov --framework secrets -d . --output cli
    #     echo "✅ Secrets scan completed"

  # Job 2: Plan de Terraform
  plan:
    name: '📋 Terraform Plan'
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.WORKING_DIR }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -out=tfplan
        terraform show -no-color tfplan > tfplan.txt
      working-directory: ${{ env.WORKING_DIR }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_project_name: ${{ secrets.TF_VAR_project_name }}
        TF_VAR_environment: ${{ secrets.TF_VAR_environment }}

    - name: Comment PR with Plan
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('${{ env.WORKING_DIR }}/tfplan.txt', 'utf8');
          const maxGitHubBodyCharacters = 65536;
          
          function chunkSubstr(str, size) {
            const numChunks = Math.ceil(str.length / size)
            const chunks = new Array(numChunks)
            for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
              chunks[i] = str.substr(o, size)
            }
            return chunks
          }
          
          var body = "## 📋 Terraform Plan\n```\n" + plan + "\n```";
          
          if (body.length > maxGitHubBodyCharacters) {
            const chunks = chunkSubstr(body, maxGitHubBodyCharacters); 
            body = chunks[0] + "\n\n**Output truncated**\n\n";
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          })

  # Job 3: Apply (solo en main branch)
  apply:
    name: '🚀 Terraform Apply'
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.WORKING_DIR }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ${{ env.WORKING_DIR }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_project_name: ${{ secrets.TF_VAR_project_name }}
        TF_VAR_environment: ${{ secrets.TF_VAR_environment }}

    - name: Output Infrastructure Info
      run: |
        echo "## 🎉 Infrastructure Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Outputs:" >> $GITHUB_STEP_SUMMARY
        terraform output >> $GITHUB_STEP_SUMMARY
      working-directory: ${{ env.WORKING_DIR }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}